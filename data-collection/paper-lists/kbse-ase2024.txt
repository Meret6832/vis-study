1+1>2: integrating deep code behaviors with metadata features for malicious pypi package detection
a combinatorial testing approach to surrogate model construction
a joint learning model with variational interaction for multilingual program translation
a longitudinal analysis of replicas in the wild wild android
a pair programming framework for code generation via multi-plan exploration and feedback-driven refinement
a position-aware approach to decomposing god classes
a systematic evaluation of large code models in api suggestion: when, which, and how
aacegen: attention guided adversarial code example generation for deep code models
advscanner: generating adversarial smart contracts to exploit reentrancy vulnerabilities using llm and static analysis
ai-driven java performance testing: balancing result quality with testing time
an empirical study on learning-based techniques for explicit and implicit commit messages generation
an empirical study to evaluate aigc detectors on code content
an explainable automated model for measuring software engineer contribution
approximation-guided fairness testing through discriminatory space analysis
art: a unified unsupervised framework for incident management in microservice systems
attribution-guided adversarial code prompt generation for code completion models
aviate: exploiting translation variants of artifacts to improve ir-based traceability recovery in bilingual software projects
axa: cross-language analysis through integration of single-language analyses
b4: towards optimal assessment of plausible code solutions with plausible tests
balancing the quality and cost of updating dependencies
beyond manual modeling: automating gui model generation using design documents
blackbox observability of features and feature interactions
bridging the gap between real-world and synthetic images for testing autonomous driving systems
can cooperative multi-agent reinforcement learning boost automatic web testing? an exploratory study
chatbr: automated assessment and improvement of bug report quality using chatgpt
cobra: interaction-aware bytecode-level vulnerability detector for smart contracts
coding-ptms: how to find optimal code pre-trained models for code embedding in vulnerability detection?
combining coverage and expert features with semantic representation for coincidental correctness detection
compiler bug isolation via enhanced test program mutation
complexcodeeval: a benchmark for evaluating large code models on more complex code
compositional security analysis of dynamic component-based systems
constraint-based test oracles for program analyzers
context-aware automated sprint plan generation for agile software development
contextualized data-wrangling code generation in computational notebooks
datarecipe — how to cook the data for codellm?
deeprest: automated test case generation for rest apis exploiting deep reinforcement learning
demonstration-free: towards more practical log parsing with large language models
detect hidden dependency to untangle commits
detecting and explaining anomalies caused by web tamper attacks via building consistency-based normality
detecting element accessing bugs in c++ sequence containers
developer-defined accelerations in continuous integration: a detection approach and catalog of patterns
devmut: testing deep learning framework via developer expertise-based mutation
diagnosis via proofs of unsatisfiability for first-order logic with relational objects
differential fuzzing for data distribution service programs with dynamic configuration
discovering likely program invariants for persistent memory
do not neglect what's on your hands: localizing software faults with exception trigger stream
drminer: extracting latent design rationale from jira issue logs
droidcoder: enhanced android code completion with context-enriched retrieval-augmented generation
dynamic scoring code token tree: a novel decoding strategy for generating high-performance code
dynamo: protecting mobile dl models through coupling obfuscated dl operators
effective unit test generation for java null pointer exceptions
effective vulnerable function identification based on cve description empowered by large language models
efficient detection of test interference in c projects
efficient detection of toxic prompts in large language models
efficient incremental code coverage analysis for regression test suites
efficient slicing of feature models via projected d-dnnf compilation
end-to-end automl for unsupervised log anomaly detection
enhancing automated program repair with solution design
enhancing the efficiency of automated program repair via greybox analysis
evaluating terminology translation in machine translation systems via metamorphic testing
evaluation of version control merge tools
exploring chatgpt app ecosystem: distribution, deployment and security
exploring parameter-efficient fine-tuning of large language model on automated program repair
faasconf: qos-aware hybrid resources configuration for serverless workflows
fail: analyzing software failures from the news using llms
fast: boosting uncertainty-based test prioritization methods for neural networks via feature selection
fastfixer: an efficient and effective approach for repairing programming assignments
fipser: improving fairness testing of dnn by seed prioritization
general and practical property-based testing for android apps
getting inspiration for feature elicitation: app store- vs. llm-based approach
giving every modality a voice in microservice failure diagnosis via multimodal adaptive optimization
giving without notifying: assessing compliance of data transmission in android apps
glitchprober: advancing effective detection and mitigation of glitch tokens in large language models
gpp: a graph-powered prioritizer for code review requests
graphcoder: enhancing repository-level code completion via coarse-to-fine retrieval based on code context graph
how does code optimization impact third-party library detection for android applications?
how effective do code language models understand poor-readability code?
how to pet a two-headed snake? solving cross-repository compatibility issues with hera
hybrid regression test selection by integrating file and method dependences
imperceptible content poisoning in llm-powered applications
incremental context-free grammar inference in black box settings
instructive code retriever: learn from large language model's feedback for code intelligence tasks
interrogation testing of program analyzers for soundness and precision issues
ismell: assembling llms with expert toolsets for code smell detection and refactoring
javabench: a benchmark of object-oriented code generation for evaluating large language models
language-agnostic static analysis of probabilistic programs
leanbin: harnessing lifting and recompilation to debloat binaries
legend: a top-down approach to scenario generation of autonomous driving systems assisted by large language models
leveraging large language model to assist detecting rust code comment inconsistency
llm meets bounded model checking: neuro-symbolic loop invariant inference
llm-generated invariants for bounded model checking without loop unrolling
magneto: a step-wise approach to exploit vulnerabilities in dependent libraries via llm-empowered directed fuzzing
maskdroid: robust android malware detection with masked graph representations
microservice decomposition techniques: an independent tool comparison
minichecker: detecting data privacy risk of abusive permission request behavior in mini-programs
mr-adopt: automatic deduction of input transformation function for metamorphic testing
mrca: metric-level root cause analysis for microservices via multi-modal data
mutation-based deep learning framework testing method in javascript environment
mutual learning-based framework for enhancing robustness of code models via adversarial training
navigating mobile testing evaluation: a comprehensive statistical analysis of android gui testing metrics
neurojit: improving just-in-time defect prediction using neurophysiological and empirical perceptions of modern developers
on the evaluation of large language models in unit test generation
parf: adaptive parameter tuning for abstract interpretation
patuntrack: automated generating patch examples for issue reports without tracked insecure code
preference-guided refactored tuning for retrieval augmented code generation
prioritizing test inputs for dnns using training dynamics
program synthesis meets visual what-comes-next puzzles
promise and peril of collaborative code generation models: balancing effectiveness and memorization
proof automation with large language models
rcfg2vec: considering long-distance dependency for binary code similarity detection
react: ir-level patch presence test for binary
reducing test runtime by transforming test fixtures
refinement types for visualization
repairing regex-dependent string functions
revisiting the conflict-resolving problem from a semantic perspective
rmcbench: benchmarking large language models' resistance to malicious code
rocas: root cause analysis of autonomous driving accidents via cyber-physical co-mutation
root cause analysis for microservice system based on causal inference: how far are we?
rust-twins: automatic rust compiler testing through program mutation and dual macros generation
scaler: efficient and effective cross flow analysis
semantic sleuth: identifying ponzi contracts via large language models
semantic-enhanced indirect call analysis with large language models
semi-supervised code translation overcoming the scarcity of parallel code data
semistructured merge with language-specific syntactic separators
shoot yourself in the foot — efficient code causes inefficiency in compiler optimizations
sifting through the chaff: on utilizing execution feedback for ranking the generated code candidates
skyeye: detecting imminent attacks via analyzing adversarial smart contracts
sliceprompttest4j: high-coverage test generation using llm via method slicing
slim: a scalable and interpretable light-weight fault localization algorithm for imbalanced data in microservice
snopy: bridging sample denoising with causal graph learning for effective vulnerability detection
sovar: build generalizable scenarios from accident reports for autonomous driving testing
spiderscan: practical detection of malicious npm packages based on graph-based behavior modeling and matching
spotting code mutation for predictive mutation testing
stase: static analysis guided symbolic execution for uefi vulnerability signature generation
test case generation for simulink models using model fuzzing and state solving
test-driven development and llm-based code generation
the potential of one-shot failure root cause analysis: collaboration of the large language model and small classifier
three heads are better than one: suggesting move method refactoring opportunities with inter-class code entity dependency enhanced hybrid hypergraph neural network
to tag, or not to tag: translating c’s unions to rust’s tagged unions
towards effective static type-error detection for python
towards synthetic trace generation of modeling operations using in-context learning approach
towards understanding the effectiveness of large language models on directed test input generation
typed and confused: studying the unexpected dangers of gradual typing
typefsl: type prediction from binaries via inter-procedural data-flow analysis and few-shot learning
ufront: toward a unified mlir frontend for deep learning
understanding code changes practically with small-scale language models
understanding the implications of changes to build systems
unlocking the power of numbers: log compression via numeric token parsing
unveiling the characteristics and impact of security patch evolution
verifying the option type with rely-guarantee reasoning
vision: identifying affected library versions for open source software vulnerabilities
vuladvisor: natural language suggestion generation for software vulnerability repair
wadec: decompile webassembly using large language model
what is wrong with my model? identifying systematic problems with semantic data slicing
what makes a high-quality training dataset for large language models: a practitioners’ perspective